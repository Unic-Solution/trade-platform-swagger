---
openapi: 3.1.0
info:
  title: 티켓 거래 플랫폼 API Document
  description: 티켓 거래 플랫폼의 서버 api 명세서
  version: '1.0'
servers:
- url: http://localhost:8080
  description: Generated server url
security:
- {}
tags:
- name: 소셜 로그인 API
  description: 소셜 로그인 관련 API 입니다.
- name: 메일 API
  description: 메일 관련 API 입니다.
- name: 회원 API
  description: 회원과 관련된 API입니다.
paths:
  "/api/payment/payment/ready":
    post:
      tags:
      - payment-controller
      operationId: paymentReady
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/com.ddang.usedauction.payment.dto.PaymentInfoDto.Request"
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/com.ddang.usedauction.payment.dto.PaymentReadyDto.Response"
  "/api/members/orders/create":
    post:
      tags:
      - order-controller
      operationId: createOrder
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/com.ddang.usedauction.order.dto.OrderCreateDto.Request"
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/com.ddang.usedauction.order.dto.OrderCreateDto.Response"
  "/api/members/member/signup":
    post:
      tags:
      - 회원 API
      summary: 회원가입
      description: 회원가입을 요청합니다. 일반 회원가입의 경우 사용합니다.
      operationId: singUp
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/com.ddang.usedauction.member.dto.MemberSignUpDto.Request"
        required: true
      responses:
        '201':
          description: 회원가입 성공
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/com.ddang.usedauction.member.dto.MemberSignUpDto.Response"
        '400':
          description: 클라이언트 에러
          content:
            "*/*":
              schema:
                type: string
        '404':
          description: 존재하지 않는 엔드포인트 호출
          content:
            "*/*":
              schema:
                type: string
        '500':
          description: 예상하지 못한 서버 에러
          content:
            "*/*":
              schema:
                type: string
  "/api/members/member/logout":
    post:
      tags:
      - 회원 API
      summary: 로그아웃
      description: 로그아웃을 요청합니다.
      operationId: logout
      responses:
        '200':
          description: 로그아웃 성공
          content:
            "*/*":
              schema:
                type: string
        '400':
          description: 클라이언트 에러
          content:
            "*/*":
              schema:
                type: string
        '401':
          description: 로그인이 필요한 상태
          content:
            "*/*":
              schema:
                type: string
        '404':
          description: 존재하지 않는 엔드포인트 호출
          content:
            "*/*":
              schema:
                type: string
        '500':
          description: 예상하지 못한 서버 에러
          content:
            "*/*":
              schema:
                type: string
      security:
      - bearerAuth: []
  "/api/members/member/login":
    post:
      tags:
      - 회원 API
      summary: 로그인
      description: 로그인을 요청합니다. 일반 로그인의 경우 사용합니다.
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/com.ddang.usedauction.member.dto.MemberLoginDto.Request"
        required: true
      responses:
        '200':
          description: 로그인 성공
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/com.ddang.usedauction.member.dto.MemberLoginDto.Response"
        '400':
          description: 클라이언트 에러
          content:
            "*/*":
              schema:
                type: string
        '404':
          description: 존재하지 않는 엔드포인트 호출
          content:
            "*/*":
              schema:
                type: string
        '500':
          description: 예상하지 못한 서버 에러
          content:
            "*/*":
              schema:
                type: string
  "/api/members/member/find-password":
    post:
      tags:
      - 회원 API
      summary: 비밀번호 찾기
      description: 아이디와 이메일 정보를 통해 비밀번호를 찾습니다. 소셜 회원의 경우 사용할 수 없습니다. 새로 생성된 비밀번호를
        이메일로 발급하며 해당 비밀번호로 로그인 이후 비밀번호 변경을 유도합니다.
      operationId: findPassword
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/com.ddang.usedauction.member.dto.MemberFindPasswordDto.Request"
        required: true
      responses:
        '200':
          description: 비밀번호 재발급 성공
          content:
            "*/*":
              schema:
                type: string
        '400':
          description: 클라이언트 에러
          content:
            "*/*":
              schema:
                type: string
        '404':
          description: 존재하지 않는 엔드포인트 호출
          content:
            "*/*":
              schema:
                type: string
        '500':
          description: 예상하지 못한 서버 에러
          content:
            "*/*":
              schema:
                type: string
      security:
      - bearerAuth: []
  "/api/members/member/find-id":
    post:
      tags:
      - 회원 API
      summary: 아이디 찾기
      description: 이메일 정보를 통해 아이디를 찾습니다. 소셜 회원은 사용하지 못합니다.
      operationId: findMemberId
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/com.ddang.usedauction.member.dto.MemberFindIdDto.Request"
        required: true
      responses:
        '200':
          description: 아이디 찾기 성공
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/com.ddang.usedauction.member.dto.MemberFindIdDto.Response"
        '400':
          description: 클라이언트 에러
          content:
            "*/*":
              schema:
                type: string
        '404':
          description: 존재하지 않는 엔드포인트 호출
          content:
            "*/*":
              schema:
                type: string
        '500':
          description: 예상하지 못한 서버 에러
          content:
            "*/*":
              schema:
                type: string
      security:
      - bearerAuth: []
  "/api/members/member/check-id":
    post:
      tags:
      - 회원 API
      summary: 아이디 중복 확인
      description: 아이디 중복 여부를 확인합니다. 회원 가입 시 사용합니다.
      operationId: checkMemberId
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/com.ddang.usedauction.member.dto.MemberCheckIdDto.Request"
        required: true
      responses:
        '200':
          description: 사용 가능한 아이디
          content:
            "*/*":
              schema:
                type: string
        '400':
          description: 클라이언트 에러
          content:
            "*/*":
              schema:
                type: string
        '404':
          description: 존재하지 않는 엔드포인트 호출
          content:
            "*/*":
              schema:
                type: string
        '500':
          description: 예상하지 못한 서버 에러
          content:
            "*/*":
              schema:
                type: string
  "/api/members/member/check-email":
    post:
      tags:
      - 회원 API
      summary: 이메일 중복 확인
      description: 이메일의 중복 여부를 확인합니다. 회원 가입 시 사용합니다.
      operationId: checkMemberEmailController
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/com.ddang.usedauction.member.dto.MemberCheckEmailDto.Request"
        required: true
      responses:
        '200':
          description: 사용 가능한 이메일
          content:
            "*/*":
              schema:
                type: string
        '400':
          description: 클라이언트 에러
          content:
            "*/*":
              schema:
                type: string
        '404':
          description: 존재하지 않는 엔드포인트 호출
          content:
            "*/*":
              schema:
                type: string
        '500':
          description: 예상하지 못한 서버 에러
          content:
            "*/*":
              schema:
                type: string
  "/api/mail/send-auth-mail":
    post:
      tags:
      - 메일 API
      summary: 인증 메일 전송
      description: 인증번호를 메일로 전송합니다.
      operationId: sendAuthMailController
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/com.ddang.usedauction.mail.dto.MailSendDto.Request"
        required: true
      responses:
        '200':
          description: 메일 전송 성공
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/com.ddang.usedauction.mail.dto.MailSendDto.Response"
        '400':
          description: 클라이언트 에러
          content:
            "*/*":
              schema:
                type: string
        '404':
          description: 존재하지 않는 엔드포인트
          content:
            "*/*":
              schema:
                type: string
        '500':
          description: 예상치 못한 서버 에러
          content:
            "*/*":
              schema:
                type: string
  "/api/mail/check-auth":
    post:
      tags:
      - 메일 API
      summary: 인증번호 일치 여부 확인
      description: 사용자가 작성한 인증번호와 이메일로 발송한 인증번호가 일치하는지 확인합니다.
      operationId: checkAuthController
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/com.ddang.usedauction.mail.dto.MailAuthCheckDto.Request"
        required: true
      responses:
        '200':
          description: 인증번호 일치함
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/com.ddang.usedauction.mail.dto.MailAuthCheckDto.Response"
        '400':
          description: 클라이언트 에러
          content:
            "*/*":
              schema:
                type: string
        '404':
          description: 존재하지 않는 엔드포인트
          content:
            "*/*":
              schema:
                type: string
        '500':
          description: 예상치 못한 서버 에러
          content:
            "*/*":
              schema:
                type: string
  "/api/members/member/change-password":
    patch:
      tags:
      - 회원 API
      summary: 비밀번호 변경
      description: 사용 중인 비밀번호를 변경합니다. 소셜 회원은 사용할 수 없습니다.
      operationId: changePassword
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/com.ddang.usedauction.member.dto.MemberChangePasswordDto.Request"
        required: true
      responses:
        '200':
          description: 비밀번호 변경 성공
          content:
            "*/*":
              schema:
                type: string
        '400':
          description: 클라이언트 에러
          content:
            "*/*":
              schema:
                type: string
        '401':
          description: 로그인이 필요한 상태
          content:
            "*/*":
              schema:
                type: string
        '404':
          description: 존재하지 않는 엔드포인트 호출
          content:
            "*/*":
              schema:
                type: string
        '500':
          description: 예상하지 못한 서버 에러
          content:
            "*/*":
              schema:
                type: string
      security:
      - bearerAuth: []
  "/api/members/member/change-email":
    patch:
      tags:
      - 회원 API
      summary: 이메일 변경
      description: 사용 중인 이메일을 변경합니다. 소셜 회원은 사용할 수 없습니다.
      operationId: changeEmail
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/com.ddang.usedauction.member.dto.MemberChangeEmailDto.Request"
        required: true
      responses:
        '200':
          description: 이메일 변경 성공
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/com.ddang.usedauction.member.dto.MemberChangeEmailDto.Response"
        '400':
          description: 클라이언트 에러
          content:
            "*/*":
              schema:
                type: string
        '401':
          description: 로그인이 필요한 상태
          content:
            "*/*":
              schema:
                type: string
        '404':
          description: 존재하지 않는 엔드포인트 호출
          content:
            "*/*":
              schema:
                type: string
        '500':
          description: 예상하지 못한 서버 에러
          content:
            "*/*":
              schema:
                type: string
      security:
      - bearerAuth: []
  "/api/payment/payment/fail":
    get:
      tags:
      - payment-controller
      operationId: paymentFail
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/com.ddang.usedauction.payment.dto.PaymentFailDto.Response"
  "/api/payment/payment/cancel":
    get:
      tags:
      - payment-controller
      operationId: paymentCancel
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/com.ddang.usedauction.payment.dto.PaymentCancelDto.Response"
  "/api/payment/payment/approve":
    get:
      tags:
      - payment-controller
      operationId: paymentApprove
      parameters:
      - name: partner_order_id
        in: query
        required: true
        schema:
          type: string
      - name: pg_token
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/com.ddang.usedauction.payment.dto.PaymentApproveDto.Response"
  "/api/oauth2/token":
    get:
      tags:
      - 소셜 로그인 API
      summary: 소셜 회원 엑세스 토큰 발급
      description: 소셜 로그인 성공 후 서버로부터 받은 code 값을 사용해 액세스 토큰 발급 받습니다.
      operationId: getToken
      parameters:
      - name: code
        in: query
        required: true
        schema:
          type: string
          minLength: 1
      responses:
        '200':
          description: 엑세스 토큰 발급 성공
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/com.ddang.usedauction.member.dto.MemberLoginDto.Response"
        '400':
          description: 클라이언트 오류
          content:
            "*/*":
              schema:
                type: string
        '404':
          description: 존재하지 않는 엔드포인트
          content:
            "*/*":
              schema:
                type: string
        '500':
          description: 예상치 못한 서버 에러
          content:
            "*/*":
              schema:
                type: string
  "/api/members/points":
    get:
      tags:
      - point-controller
      operationId: getPointBalance
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/com.ddang.usedauction.point.dto.PointBalanceDto.Response"
  "/api/members/points/history":
    get:
      tags:
      - point-controller
      operationId: getPointList
      parameters:
      - name: startDate
        in: query
        required: false
        schema:
          type: string
          format: date
      - name: endDate
        in: query
        required: false
        schema:
          type: string
          format: date
      - name: sorted
        in: query
        required: false
        schema:
          type: string
          default: latest
      - name: pageable
        in: query
        required: true
        schema:
          "$ref": "#/components/schemas/org.springdoc.core.converters.models.Pageable"
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/org.springframework.data.domain.PageCom.ddang.usedauction.point.dto.PointHistoryDto.Response"
  "/api/members/member":
    get:
      tags:
      - 회원 API
      summary: 로그인한 회원 정보 조회
      description: 로그인한 회원의 정보를 조회합니다.
      operationId: getMemberController
      responses:
        '200':
          description: 조회 성공
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/com.ddang.usedauction.member.dto.MemberGetDto.Response"
        '400':
          description: 클라이언트 에러
          content:
            "*/*":
              schema:
                type: string
        '401':
          description: 로그인이 필요한 상태
          content:
            "*/*":
              schema:
                type: string
        '404':
          description: 존재하지 않는 엔드포인트 호출
          content:
            "*/*":
              schema:
                type: string
        '500':
          description: 예상하지 못한 서버 에러
          content:
            "*/*":
              schema:
                type: string
      security:
      - bearerAuth: []
    delete:
      tags:
      - 회원 API
      summary: 회원 탈퇴
      description: 회원 탈퇴를 진행합니다. 회원 데이터는 소프트딜리트 처리됩니다.
      operationId: deleteMemberController
      responses:
        '200':
          description: 회원 탈퇴 성공
          content:
            "*/*":
              schema:
                type: string
        '400':
          description: 클라이언트 에러
          content:
            "*/*":
              schema:
                type: string
        '401':
          description: 로그인이 필요한 상태
          content:
            "*/*":
              schema:
                type: string
        '404':
          description: 존재하지 않는 엔드포인트 호출
          content:
            "*/*":
              schema:
                type: string
        '500':
          description: 예상하지 못한 서버 에러
          content:
            "*/*":
              schema:
                type: string
      security:
      - bearerAuth: []
  "/api/categories":
    get:
      tags:
      - category-controller
      summary: 카테고리 리스트 조회
      description: 카테고리 리스트를 조회합니다. 자식 카테고리까지 함께 조회하며 자식 카테고리는 비어있을 수 있습니다.
      operationId: getCategoriesController
      responses:
        '200':
          description: 카테고리 리스트 조회 성공
          content:
            "*/*":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/com.ddang.usedauction.category.dto.CategoryTreeDto.Response"
        '404':
          description: 존재하지 않는 엔드포인트 호출
          content:
            "*/*":
              schema:
                type: string
        '500':
          description: 예상치 못한 서버 에러
          content:
            "*/*":
              schema:
                type: string
  "/api/categories/category/{categoryId}":
    get:
      tags:
      - category-controller
      summary: 카테고리 상세 조회
      description: 특정 하나의 카테고리에 대하여 조회합니다.
      operationId: getCategoryController
      parameters:
      - name: categoryId
        in: path
        required: true
        schema:
          type: integer
          format: int64
          exclusiveMinimum: 0
      responses:
        '200':
          description: 카테고리 조회 성공
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/com.ddang.usedauction.category.dto.CategoryGetDto.Response"
        '400':
          description: 클라이언트 에러
          content:
            "*/*":
              schema:
                type: string
        '404':
          description: 존재하지 않는 엔드포인트 호출
          content:
            "*/*":
              schema:
                type: string
        '500':
          description: 예상치 못한 서버 에러
          content:
            "*/*":
              schema:
                type: string
components:
  schemas:
    com.ddang.usedauction.payment.dto.PaymentInfoDto.Request:
      type: object
      properties:
        orderId:
          type: integer
          format: int64
        memberId:
          type: integer
          format: int64
        price:
          type: integer
          format: int64
          minimum: 1
      required:
      - memberId
      - orderId
    com.ddang.usedauction.payment.dto.PaymentReadyDto.Response:
      type: object
      properties:
        tid:
          type: string
        next_redirect_pc_url:
          type: string
        created_at:
          type: string
          format: date-time
    com.ddang.usedauction.order.dto.OrderCreateDto.Request:
      type: object
      properties:
        price:
          type: integer
          format: int32
    com.ddang.usedauction.order.dto.OrderCreateDto.Response:
      type: object
      properties:
        orderId:
          type: integer
          format: int64
        memberId:
          type: integer
          format: int64
    com.ddang.usedauction.member.dto.MemberSignUpDto.Response:
      type: object
      properties:
        memberId:
          type: string
          description: 회원가입된 아이디
          example: test
    com.ddang.usedauction.member.dto.MemberSignUpDto.Request:
      type: object
      properties:
        memberId:
          type: string
          description: 아이디
          example: test
          minLength: 1
          pattern: "^[a-z0-9]{6,12}$"
        password:
          type: string
          description: 비밀번호
          example: abc1234
          minLength: 1
          pattern: "^(?=.*[A-Za-z].*)(?=.*[0-9!@#$%^&*()\\-_=+{};:,<.>].*).{4,16}$"
        confirmPassword:
          type: string
          description: 비밀번호 확인
          example: abc1234
          minLength: 1
        email:
          type: string
          description: 이메일
          example: test@naver.com
          minLength: 1
          pattern: "^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,6}$"
      required:
      - confirmPassword
      - email
      - memberId
      - password
    com.ddang.usedauction.member.dto.MemberLoginDto.Response:
      type: object
      properties:
        accessToken:
          type: string
          description: 액세스 토큰
          example: fjasdk;ghjioewjaklasdfkvljiorjewklafjdjafjgkheraklhkljdhsfjkv
        memberId:
          type: string
          description: 회원 아이디
          example: test
    com.ddang.usedauction.member.dto.MemberLoginDto.Request:
      type: object
      properties:
        memberId:
          type: string
          description: 아이디
          example: test
          minLength: 1
        password:
          type: string
          description: 비밀번호
          example: abc1234
          minLength: 1
      required:
      - memberId
      - password
    com.ddang.usedauction.member.dto.MemberFindPasswordDto.Request:
      type: object
      properties:
        memberId:
          type: string
          description: 회원 아이디
          example: test
          minLength: 1
        email:
          type: string
          description: 이메일 주소
          example: test@naver.com
          minLength: 1
          pattern: "^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,6}$"
      required:
      - email
      - memberId
    com.ddang.usedauction.member.dto.MemberFindIdDto.Response:
      type: object
      properties:
        memberId:
          type: string
          description: 조회된 회원 아이디
          example: test
    com.ddang.usedauction.member.dto.MemberFindIdDto.Request:
      type: object
      properties:
        email:
          type: string
          description: 이메일 주소
          example: test@naver.com
          minLength: 1
          pattern: "^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,6}$"
      required:
      - email
    com.ddang.usedauction.member.dto.MemberCheckIdDto.Request:
      type: object
      properties:
        memberId:
          type: string
          description: 중복 확인할 아이디
          example: test
          minLength: 1
          pattern: "^[a-z0-9]{6,12}$"
      required:
      - memberId
    com.ddang.usedauction.member.dto.MemberCheckEmailDto.Request:
      type: object
      properties:
        email:
          type: string
          description: 중복 확인할 이메일 주소
          example: test@naver.com
          minLength: 1
          pattern: "^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,6}$"
      required:
      - email
    com.ddang.usedauction.mail.dto.MailSendDto.Response:
      type: object
      properties:
        email:
          type: string
          description: 전송 받을 이메일 주소
          example: test@naver.com
    com.ddang.usedauction.mail.dto.MailSendDto.Request:
      type: object
      properties:
        email:
          type: string
          description: 받을 이메일 주소
          example: test@naver.com
          minLength: 1
          pattern: "^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,6}$"
      required:
      - email
    com.ddang.usedauction.mail.dto.MailAuthCheckDto.Response:
      type: object
      properties:
        email:
          type: string
          description: 인증된 이메일 주소
          example: test@naver.com
    com.ddang.usedauction.mail.dto.MailAuthCheckDto.Request:
      type: object
      properties:
        email:
          type: string
          description: 인증번호를 전송받은 이메일
          example: test@naver.com
          minLength: 1
          pattern: "^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,6}$"
        authNum:
          type: string
          description: 인증번호
          example: 2123
          minLength: 1
          pattern: "^[0-9]{4}$"
      required:
      - authNum
      - email
    com.ddang.usedauction.member.dto.MemberChangePasswordDto.Request:
      type: object
      properties:
        curPassword:
          type: string
          description: 변경 전 패스워드
          example: abc123
          minLength: 1
          pattern: "^(?=.*[A-Za-z].*)(?=.*[0-9!@#$%^&*()\\-_=+{};:,<.>].*).{4,16}$"
        newPassword:
          type: string
          description: 변경할 패스워드
          example: abc123
          minLength: 1
          pattern: "^(?=.*[A-Za-z].*)(?=.*[0-9!@#$%^&*()\\-_=+{};:,<.>].*).{4,16}$"
        confirmPassword:
          type: string
          description: 변경할 패스워드 확인
          example: abc123
          minLength: 1
      required:
      - confirmPassword
      - curPassword
      - newPassword
    com.ddang.usedauction.member.dto.MemberChangeEmailDto.Response:
      type: object
      properties:
        email:
          type: string
          description: 변경된 이메일 주소
          example: test@naver.com
    com.ddang.usedauction.member.dto.MemberChangeEmailDto.Request:
      type: object
      properties:
        email:
          type: string
          description: 변경할 이메일 주소
          example: test@naver.com
          minLength: 1
          pattern: "^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,6}$"
      required:
      - email
    com.ddang.usedauction.payment.dto.PaymentFailDto.Response:
      type: object
      properties:
        message:
          type: string
    com.ddang.usedauction.payment.dto.PaymentCancelDto.Response:
      type: object
      properties:
        message:
          type: string
    com.ddang.usedauction.payment.dto.Amount:
      type: object
      properties:
        total:
          type: integer
          format: int32
        tax_free:
          type: integer
          format: int32
    com.ddang.usedauction.payment.dto.PaymentApproveDto.Response:
      type: object
      properties:
        aid:
          type: string
        tid:
          type: string
        cid:
          type: string
        partner_order_id:
          type: string
        partner_user_id:
          type: string
        payment_method_type:
          type: string
        amount:
          "$ref": "#/components/schemas/com.ddang.usedauction.payment.dto.Amount"
        item_name:
          type: string
        quantity:
          type: integer
          format: int32
        created_at:
          type: string
          format: date-time
        approved_at:
          type: string
          format: date-time
    com.ddang.usedauction.point.dto.PointBalanceDto.Response:
      type: object
      properties:
        pointAmount:
          type: integer
          format: int64
    org.springdoc.core.converters.models.Pageable:
      type: object
      properties:
        page:
          type: integer
          format: int32
          minimum: 0
        size:
          type: integer
          format: int32
          minimum: 1
        sort:
          type: array
          items:
            type: string
    PageableObject:
      type: object
      properties:
        offset:
          type: integer
          format: int64
        sort:
          "$ref": "#/components/schemas/SortObject"
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        paged:
          type: boolean
        unpaged:
          type: boolean
    SortObject:
      type: object
      properties:
        empty:
          type: boolean
        sorted:
          type: boolean
        unsorted:
          type: boolean
    com.ddang.usedauction.point.dto.PointHistoryDto.Response:
      type: object
      properties:
        id:
          type: integer
          format: int64
        pointType:
          type: string
          enum:
          - USE
          - GET
          - CHARGE
        pointAmount:
          type: integer
          format: int64
        curPointAmount:
          type: integer
          format: int64
        memberId:
          type: integer
          format: int64
        createdAt:
          type: string
          format: date-time
    org.springframework.data.domain.PageCom.ddang.usedauction.point.dto.PointHistoryDto.Response:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            "$ref": "#/components/schemas/com.ddang.usedauction.point.dto.PointHistoryDto.Response"
        number:
          type: integer
          format: int32
        sort:
          "$ref": "#/components/schemas/SortObject"
        numberOfElements:
          type: integer
          format: int32
        pageable:
          "$ref": "#/components/schemas/PageableObject"
        empty:
          type: boolean
    com.ddang.usedauction.member.dto.MemberGetDto.Response:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: 회원 pk
          example: 1
        memberId:
          type: string
          description: 회원 아이디
          example: test
        email:
          type: string
          description: 이메일
          example: test@naver.com
        siteAlarm:
          type: boolean
          description: 알림 수락 여부
          example: true
        point:
          type: integer
          format: int64
          description: 보유 포인트
          example: 1000
        social:
          type: string
          description: 소셜 로그인 주체
          example: kakao
        socialProviderId:
          type: string
          description: 소셜 로그인 고유 아이디
          example: kldasjf213
        createdAt:
          type: string
          format: date-time
          description: 회원 가입 날짜
          example: 1900-01-01 11:11
    com.ddang.usedauction.category.dto.CategoryTreeDto.Response:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: 카테고리 pk
          example: 1
        categoryName:
          type: string
          description: 카테고리 이름
          example: 카테고리
        child:
          "$ref": "#/components/schemas/com.ddang.usedauction.category.dto.CategoryTreeDto.Response"
          description: 자식 카테고리 리스트, 비어있을 수 있습니다.
    com.ddang.usedauction.category.dto.CategoryGetDto.Response:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: 카테고리 pk
          example: 1
        categoryName:
          type: string
          description: 카테고리 이름
          example: 스포츠
        parentId:
          type: integer
          format: int64
          description: 부모 카테고리 pk
          example: 3
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
